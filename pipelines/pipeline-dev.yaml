name: dev-centric-terraform

trigger:
  branches:
    include:
    - master
    - feature/*
    - release/*
    - fix/*
    - feat/*
  paths:
     include:
     - 'terraform/dev'

pool: azure-container-app

stages:
  - stage: plan
    displayName: "Plan and Generate Artifact"
    variables:
      - group: ARM-dev
    jobs:
      - job: plan 
        displayName: Plan
        steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              workingDirectory: 'terraform/dev'
              command: init
              backendServiceArm: 'ado-WDHB-Project-Centric-dev'
              backendAzureRmResourceGroupName: '$(ARM.ResourceGroup.dev.Name)'
              backendAzureRmStorageAccountName: '$(ARM.StorageAccount.dev.Name)'
              backendAzureRmContainerName: '$(ARM.StorageAccount.dev.Container.Name)'
              backendAzureRmKey: '$(ARM.StorageAccount.dev.FileName)'
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              workingDirectory: 'terraform/dev'
              command: validate
              backendServiceArm: 'ado-WDHB-Project-Centric-dev'
              backendAzureRmResourceGroupName: '$(ARM.ResourceGroup.dev.Name)'
              backendAzureRmStorageAccountName: '$(ARM.StorageAccount.dev.Name)'
              backendAzureRmContainerName: '$(ARM.StorageAccount.dev.Container.Name)'
              backendAzureRmKey: '$(ARM.StorageAccount.dev.FileName)'
          - task: TerraformTaskV2@2
            displayName: Terraform Plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-out $(Build.BuildId).tfplan'
              workingDirectory: 'terraform/dev'
              environmentServiceNameAzureRM: 'ado-WDHB-Project-Centric-dev'
          - task: ArchiveFiles@2
            displayName: 'Archive Terraform Plan Files'
            inputs:
              rootFolderOrFile: 'terraform/dev'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-tfplan.tgz'
              replaceExistingArchive: true     
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Terraform Plan Artifact'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifactName: '$(Build.BuildId)-tfplan'
              artifactType: pipeline
          - script: |
              cd $(System.DefaultWorkingDirectory)/'terraform/dev'
              ls -l
              terraform show -json $(System.DefaultWorkingDirectory)/'terraform/dev'/$(Build.BuildId).tfplan > tf.json
            displayName: 'Terraform Show'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Terraform Show Artifact'
            inputs:
              targetPath: 'terraform/dev/tf.json'
              artifactName: 'tfshow'
              artifactType: pipeline
  - stage: compliance
    dependsOn: plan
    displayName: 'Static Code Analysis Stage'
    jobs:
      - job: ScanningCodes
        displayName: 'Run Checkov'
        steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download JSON Artifact'
          inputs:
            source: current 
            artifactName: 'tfshow'
            downloadPath: $(System.DefaultWorkingDirectory)/'terraform/dev'
        - script: |
                  mkdir CheckovReport
                  docker pull bridgecrew/checkov
                  docker run --volume $(System.DefaultWorkingDirectory)/'terraform/dev':/tf --workdir /tf bridgecrew/checkov --download-external-modules true --skip-check CKV_AZURE_39 --framework terraform_plan --file /tf/tf.json --output junitxml > $(System.DefaultWorkingDirectory)/CheckovReport/Checkov-Report.xml
          displayName: 'Do Checkov Static Code Analysis'
        - task: PublishTestResults@2
          displayName: Publish Checkov Test Results
          condition: succeededOrFailed()
          inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/Checkov-Report.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)/CheckovReport'
              mergeTestResults: false
              testRunTitle: Checkov Scan
              failTaskOnFailedTests: false
              publishRunAttachments: true
  # - stage: deploy
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  #   dependsOn: 
  #     - plan
  #     - compliance
  #   displayName: Deploy
  #   variables:
  #     - group: ARM
  #   jobs:
  #     - job: apply
  #       displayName: Deploy Terraform plan
  #       steps:
  #       - task: DownloadPipelineArtifact@2
  #         displayName: 'Download JSON Artifact'
  #         inputs:
  #           source: current 
  #           artifactName: '$(Build.BuildId)-tfplan'
  #           downloadPath: $(System.DefaultWorkingDirectory)/Artifact
  #       - task: ExtractFiles@1
  #         inputs:
  #           archiveFilePatterns: 'Artifact/*.tgz' 
  #           destinationFolder:  'terraform/dev'
  #           overwriteExistingFiles: true
        # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV2@2
        #   displayName: 'Terraform Init'
        #   inputs:
        #       provider: 'azurerm'
        #       workingDirectory: 'terraform/dev'
        #       command: 'init' 
        #       backendServiceArm: 'ado-WDHB-Project-Centric-dev'
        #       backendAzureRmResourceGroupName: '$(ARM.ResourceGroup.dev.Name)'
        #       backendAzureRmStorageAccountName: '$(ARM.StorageAccount.dev.Name)'
        #       backendAzureRmContainerName: '$(ARM.StorageAccount.dev.Container.Name)'
        #       backendAzureRmKey: '$(ARM.StorageAccount.dev.FileName)'
        # - task: TerraformTaskV2@2
        #   displayName: 'Terraform Apply'
        #   inputs:
        #       provider: 'azurerm'
        #       command: 'apply'
        #       workingDirectory: 'terraform/dev'
        #       environmentServiceNameAzureRM: 'ado-WDHB-Project-Centric-dev'
